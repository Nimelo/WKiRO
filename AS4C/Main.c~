
#include<stdio.h>
#include<stdlib.h>
#include<math.h>

int** getMatrixFromVector(int* vRows, int* vCols, int* vector);
void deleteMatrix(int* rows, int** matrix);
void bitmapMatrix(int* vRows, int* vCols, int* vector, int* maskRows, int* maskCols, int* mask);
int calculateCoefficientMatrix(int* vRows, int* vCols, int** matrix, int* maskRows, int* maskCols, int** mask, int x, int y);
int isInRange(int x, int max);

int main(int argc, char* args[]) {

	int vector[100] = { 1,3,5,7,9,11,13,15,2,4,6,8,10,12,14,16};
	int mask[] = {0,0,0,1,0,0,0,0,0 };

	//int* vector = malloc(sizeof(int) * 100);

	//double mask[] = { 1,1,1,1,1,1,1,1,1 };
	int mask2[] = { -1,-1,-1,-1,9,-1,-1,-1,-1 };

	int x = 4;
	int y = 4;
	int one = 3;

	bitmapMatrix(&x, &y, vector, &one, &one, mask);

}

void bitmapMatrix(int* vRows, int* vCols, int* vector, int* maskRows, int* maskCols, int* mask) {

	int** matrix = getMatrixFromVector(vRows, vCols, vector);
	int** maskMatrix = getMatrixFromVector(maskRows, maskCols, mask);

	for (int i = 0; i < *vRows; i++) {
		for (int j = 0; j < *vCols; j++) {
			vector[(i * *vCols) + j] = calculateCoefficientMatrix(vRows, vCols, matrix, maskRows, maskCols, maskMatrix, i, j);
		}
	}

	deleteMatrix(vRows, matrix);
	deleteMatrix(maskRows, maskMatrix);
}

int calculateCoefficientMatrix(int* vRows, int* vCols, int** matrix, int* maskRows, int* maskCols, int** mask, int x, int y) {
	int coefficientSum = 0;
	double value = 0;

	int xOffset = (*maskRows - 1) / 2;
	int yOffset = (*maskCols - 1) / 2;

	for (int i = -xOffset; i <= xOffset; i++) {
		for (int j = -yOffset; j <= yOffset; j++) {			
			if (isInRange(x - i, *vRows) && isInRange(y + j, *vCols)) {
				int coefficient = mask[i + xOffset][j + yOffset];
				coefficientSum += abs(coefficient);
				value += matrix[x - i][y + j] * coefficient;
			}
		}
	}

	if (coefficientSum == 0) {
		coefficientSum = 1;
	}

	return  normalize0_255((int)round((double)value / coefficientSum));
}

int isInRange(int x, int max) {
	if (x >= 0 && x < max) {
		return 1;
	}

	return 0;
}

int normalize0_255(int value) {
	if (value > 255) {
		return 255;
	}
	else if (value < 0) {
		return 0;
	}
	else {
		return value;
	}

}

int** getMatrixFromVector(int* vRows, int* vCols, int* vector) {
	int** matrix = NULL;

	matrix = malloc(*vRows * sizeof(int*));

	for (int i = 0; i < *vRows; i++) {
		matrix[i] = malloc(*vCols * sizeof(int));
	}

	for (int i = 0; i < *vCols; i++) {
		for (int j = 0; j < *vRows; j++) {		
			matrix[j][i] = *vector++;
		}
	}

	return matrix;
}

void deleteMatrix(int* rows, int** matrix) {
	for (int i = 0; i < *rows; i++) {
		free(matrix[i]);
	}

	free(matrix);
}